{
	"info": {
		"_postman_id": "da51c229-e04f-4beb-a8ee-6712e952ee7b",
		"name": "Scheduler",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "259734",
		"_collection_link": "https://grey-rocket-8687.postman.co/workspace/PLUMX~61f085b2-420b-4019-bd45-dcc57228fcb1/collection/259734-da51c229-e04f-4beb-a8ee-6712e952ee7b?action=share&source=collection_link&creator=259734"
	},
	"item": [
		{
			"name": "Batch Leads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "base64:qUQNE6QreIrkvhN3dNZpdh4mTSRaUDmVzNnUOm27GOM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"leads\": [\n        {\n            \"first_name\": \"jose\",\n            \"last_name\": \"pedro\",\n            \"email\": \"gdsgsdfgsfdg@gsdf.fg\",\n            \"phone\": \"704123413\",\n            \"phonecc\": \"\",\n            \"session_id\": \"\",\n            \"affiliate_id\": \"\",\n            \"offerName\": \"QuantumAI3322\",\n            \"offerUrl\": \"https://worldsinvesinshow.click/ca/quantumai-custom43/\",\n            \"landingUrl\": \"\",\n            \"dev\": false,\n            \"lang\": \"default\",\n            \"mpc5\": \"2520\",\n            \"mpc6\": \"3322\",\n            \"source_id\": \"174\",\n            \"selectedCountry\": \"SE\",\n            \"clickId\": \"38gq91gfmcep\",\n            \"success_page\": \"{success_page}\",\n            \"language\": null,\n            \"traffic_source\": \"facebook\",\n            \"facebook_pixel_id\": \"{facebook_pixel_id}\",\n            \"twitter_pixel_id\": \"\",\n            \"tiktok_pixel_id\": \"\",\n            \"pinterest_pixel_id\": \"\",\n            \"quora_pixel_id\": \"\",\n            \"snap_chat_pixel_id\": \"\",\n            \"reddit_pixel_id\": \"\",\n            \"grule\": \"\",\n            \"ip_data\": {\n                \"ip\": \"185.195.233.203\",\n                \"city\": \"Stockholm\",\n                \"region\": \"Stockholm\",\n                \"country\": \"SE\",\n                \"loc\": \"59.3294,18.0687\",\n                \"postal\": \"100 04\",\n                \"timezone\": \"Europe/Stockholm\",\n                \"asn\": {\n                    \"asn\": \"AS39351\",\n                    \"name\": \"31173 Services AB\",\n                    \"domain\": \"31173.se\",\n                    \"route\": \"185.195.233.0/24\",\n                    \"type\": \"hosting\"\n                },\n                \"privacy\": {\n                    \"vpn\": false,\n                    \"proxy\": false,\n                    \"tor\": false,\n                    \"relay\": false,\n                    \"hosting\": false,\n                    \"service\": \"\"\n                },\n                \"country_name\": \"Sweden\"\n            },\n            \"phone_phoneCode\": \"+46\"\n        }\n    ],\n    \"partner_id\": 1,\n    \"fromDate\": \"2024-02-22 09:00:00\",\n    \"toDate\": \"2024-02-22 00:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/batch",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"batch"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "TakeScreenShot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"url\": \"https://tixxio.com\",\n \"proxy\": {\n    \"host\": \"135.125.153.168\",\n    \"port\": \"10459\",\n    \"protocotol\": \"http\"\n }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/browser",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"browser"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Patners List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "base64:qUQNE6QreIrkvhN3dNZpdh4mTSRaUDmVzNnUOm27GOM=",
						"type": "text"
					},
					{
						"key": "Proxy-Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"lead\": {\n        \"id\": 8777172,\n        \"ip\": \"2.71.108.4\",\n        \"affid\": \"22\",\n        \"email\": \"gdsgsdfgsfdg@gsdf.fg\",\n        \"hitid\": \"9e5b40ba27c04c4ffe073437cf1e3a5a\",\n        \"phone\": \"eyJpdiI6ImluNHlUNERWTlEvd0RwMHhRV04vWWc9PSIsInZhbHVlIjoiQllzWjVJK2ZVNXdpSkVDZlZEVlNRNGVKcXlnRDNkRlowaGFBZkxEOGF2TT0iLCJtYWMiOiJlMzViMmQwZTVlODJiNzE0NDEzNjhjZTlhNDEzMWQ4NmFhN2NiNzI0ZDBhMWU2YjJlYTU1Y2Q5Njc5Y2VhZWJlIiwidGFnIjoiIn0=\",\n        \"funnel\": \"QuantumProject3394\",\n        \"traffic\": \"live\",\n        \"location\": {\n            \"id\": 8776982,\n            \"ip\": \"2.71.108.4\",\n            \"lat\": 59.27099991,\n            \"lon\": 17.89139938,\n            \"city\": \"SkÃ¤rholmen\",\n            \"country\": \"Sweden\",\n            \"isoCode\": \"SE\",\n            \"lead_id\": 8777172,\n            \"timezone\": \"Europe/Stockholm\",\n            \"continent\": \"EU\",\n            \"postal_code\": \"127 33\"\n        },\n        \"is_mobile\": false,\n        \"last_name\": \"pedro\",\n        \"created_at\": \"2024-02-22T21:50:47.000000Z\",\n        \"first_name\": \"jose\",\n        \"updated_at\": \"2024-02-22T21:51:07.000000Z\",\n        \"custom_field_1\": null,\n        \"custom_field_2\": null\n    },\n    \"token\": \"wG0BoBYx5VrvaUxjTtFB\",\n    \"broker\": {\n        \"name\": \"the Broker\",\n        \"image1\": \"default.png\"\n    },\n    \"extras\": {\n        \"redirect\": {\n            \"url\": \"https://makster.org/thankyou/wG0BoBYx5VrvaUxjTtFB\",\n            \"trse\": false,\n            \"method\": \"get\",\n            \"params\": [],\n            \"secureConnection\": true\n        },\n        \"broker_name\": \"the Broker\"\n    },\n    \"request_id\": \"eecf8900-932e-4500-b2d8-127535078ab6\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/partners",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"partners"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Astroproxy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "base64:qUQNE6QreIrkvhN3dNZpdh4mTSRaUDmVzNnUOm27GOM=",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://astroproxy.com/api/v1/countries?token=6d424b0db7586acd",
					"protocol": "https",
					"host": [
						"astroproxy",
						"com"
					],
					"path": [
						"api",
						"v1",
						"countries"
					],
					"query": [
						{
							"key": "token",
							"value": "6d424b0db7586acd"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Save Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "base64:qUQNE6QreIrkvhN3dNZpdh4mTSRaUDmVzNnUOm27GOM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/lead-results",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"lead-results"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "SendLeadToAK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "first_name",
							"value": "devdev2",
							"type": "text"
						},
						{
							"key": "last_name",
							"value": "devdev2",
							"type": "text"
						},
						{
							"key": "password",
							"value": "cyhsEZ209",
							"type": "text"
						},
						{
							"key": "email",
							"value": "dev.de22v@gmail.test",
							"type": "text"
						},
						{
							"key": "funnel",
							"value": "QuantumProject3394",
							"type": "text"
						},
						{
							"key": "affid",
							"value": "22",
							"type": "text"
						},
						{
							"key": "phone",
							"value": "704123413",
							"type": "text"
						},
						{
							"key": "area_code",
							"value": "+46",
							"type": "text"
						},
						{
							"key": "hitid",
							"value": "9e5b40ba27c04c4ffe073437cf1e3a5a",
							"type": "text"
						},
						{
							"key": "_ip",
							"value": "89.233.238.80",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api.clickmasters.net/leads",
					"protocol": "https",
					"host": [
						"api",
						"clickmasters",
						"net"
					],
					"path": [
						"leads"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "http://google.com.ua",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://google.com.ua",
					"protocol": "http",
					"host": [
						"google",
						"com",
						"ua"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}